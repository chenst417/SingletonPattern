一：单例模式(Singleton Pattern)，

	定义：
		该类在使用时，只能被实例化一次，且只提供一个全局访问点。
	特点：
		a:构造函数私有化
		b:提供一个全局访问点
	优点：
		a:内存中支创建一个实例，减少了对内存的消耗，尤其是频繁的创建和消耗实例。
		b：减少了对资源的双重消耗。(比如写操作)
	缺点：
	  	a：没见接口，不能继承，与单一职责相违背。
	  	b：一个类只能通过内部来实例化，不能通过外部来实例化。
	应用案例：

	应用场景：
		a:创建一个对象需要消耗过多的内存资源，比如IO操作、数据库连接操作。
		b:唯一序列号的生成。


	反射攻击：饿汉式单例、懒汉式单例、注册式单例(枚举除外)
	序列化和反序列化：饿汉式单例、懒汉式单例、注册式单例(枚举除外)

	防止反射攻击： 私有的构造函数进行空值判断
	序列化和反序列化攻击：重写readResolve方法

	枚举式单例：从JDK层面就为枚举式单例不被反序列化和反射攻击保驾护航。